openapi: 3.0.0
info:
  title: Playas App Backend
  description: "Tecnologías utilizadas: Node.js, TypeScript, Express, PostgreSQL, Prisma, JWT, Swagger, Cloudinary."
  version: 1.0.0

servers:
  - url: http://localhost:9090/api
    description: Servidor de desarrollo
  # - url: https://signs-lang-pe.up.railway.app/api
  #   description: Servidor de producción

tags:
  - name: Municipalities
    description: Operaciones con usuarios
  - name: Beaches
    description: Operaciones con playas

paths:
  /municipalities:
    get:
      tags:
        - Municipalities
      summary: Listar municipalidades
      description: Obtiene una lista de todas las municipalidades registradas en la base de datos
      responses:
        "200":
          description: Lista de municipalidades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/municipality"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Municipalities
      summary: Crear municipalidad
      description: Crea una nueva municipalidad en la base de datos
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/requestBodies/municipalityCreate"
      responses:
        "201":
          description: Municipalidad creada
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/municipality"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /municipalities/login:
    post:
      tags:
        - Municipalities
      summary: Iniciar sesión
      description: Inicia sesión en la aplicación
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/municipalityLogin"
      responses:
        "200":
          description: Sesión iniciada
          content:
            application/json:
              schema:
                $ref: "#/components/responses/municipalityLogin"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /municipalities/{id}:
    get:
      tags:
        - Municipalities
      summary: Obtener municipalidad
      description: Obtiene una municipalidad por su ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la municipalidad
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Municipalidad encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/municipality"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - Municipalities
      summary: Actualizar municipalidad
      description: Actualiza una municipalidad por su ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la municipalidad
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/requestBodies/municipalityUpdate"
      responses:
        "200":
          description: Municipalidad encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/municipality"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Municipalities
      summary: Eliminar municipalidad
      description: Elimina una municipalidad por su ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la municipalidad
          schema:
            type: string
            format: cuid
      responses:
        "204":
          description: Municipalidad eliminada
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /municipalities/email/{email}:
    get:
      tags:
        - Municipalities
      summary: Verificar correo electrónico
      description: Verifica si un correo electrónico ya está registrado
      parameters:
        - name: email
          in: path
          required: true
          description: Correo electrónico a verificar
          schema:
            type: string
      responses:
        "200":
          description: Correo electrónico verificado
          content:
            application/json:
              schema:
                type: object
                properties:
                  isEmailRegistered:
                    type: boolean
                    example: false
        "500":
          $ref: "#/components/responses/InternalServerError"

  /beaches:
    get:
      tags:
        - Beaches
      summary: Listar playas
      description: Obtiene una lista de todas las playas registradas en la base de datos
      responses:
        "200":
          description: Lista de playas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/beach"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /beaches/{id}:
    get:
      tags:
        - Beaches
      summary: Obtener playa
      description: Obtiene una playa por su ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la playa
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Playa encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beach"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - Beaches
      summary: Actualizar playa
      description: Actualiza una playa por su ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la playa
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/requestBodies/beach"
      responses:
        "200":
          description: Playa encontrada
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/beach"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Beaches
      summary: Eliminar playa
      description: Elimina una playa por su ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la playa
          schema:
            type: string
            format: cuid
      responses:
        "204":
          description: Playa eliminada
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /beaches/municipality/{municipalityId}:
    get:
      tags:
        - Beaches
      summary: Listar playas por municipalidad
      description: Obtiene una lista de todas las playas registradas en la base de datos por una municipalidad
      parameters:
        - name: municipalityId
          in: path
          required: true
          description: ID de la municipalidad
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Lista de playas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/beach"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Beaches
      summary: Crear playa
      description: Crea una nueva playa en la base de datos
      security:
        - bearerAuth: []
      parameters:
        - name: municipalityId
          in: path
          required: true
          description: ID de la municipalidad
          schema:
            type: string
            format: cuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/requestBodies/beach"
      responses:
        "201":
          description: Playa creada
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/beach"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /beaches/{id}/activate:
    patch:
      tags:
        - Beaches
      summary: Activar playa
      description: Activa una playa por su ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la playa
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Playa activada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beach"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /beaches/{id}/deactivate:
    patch:
      tags:
        - Beaches
      summary: Desactivar playa
      description: Desactiva una playa por su ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la playa
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Playa desactivada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/beach"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Token JWT para autenticación. Los usuarios autenticados pueden tener uno de los siguientes roles: "admin", "user".'

  # RESPONSES
  responses:
    # GENERAL
    BadRequest:
      description: Datos no válidos. La solicitud no se puede procesar debido a errores de cliente.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Datos no válidos. Asegúrate de que todos los campos requeridos estén presentes y sean correctos."
              validationErrors:
                type: array
                items:
                  type: string
                example:
                  [
                    "El campo 'nombre' es requerido.",
                    "La dirección de correo electrónico no es válida.",
                    "Ya existe un usuario con el correo electrónico",
                  ]

    Unauthorized:
      description: No autenticado. Se requiere un token válido.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No autenticado. Se requiere un token válido."

    Forbidden:
      description: No tienes permisos para acceder a este recurso.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Acceso prohibido. No tienes los permisos necesarios."

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No se encontró el recurso solicitado"

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error interno del servidor"

    # AUTH
    municipalityLogin:
      type: object
      properties:
        municipality:
          $ref: "#/components/schemas/municipality"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjIwZjQwZjIwZjIwZjIwZjIwZjIwZjIiLCJyb2xlIjoidXNlciIsImlhdCI6MTYzMDIwNjQwMCwiZXhwIjoxNjMwMjA2NDAwfQ.7"

  requestBodies:
    municipalityLogin:
      type: object
      properties:
        email:
          type: string
          example: "john.doe@example.com"
          description: Correo electrónico del usuario, debe cumplir con el formato de un correo electrónico válido

        password:
          type: string
          example: "Abcd1234_"
          description: Contraseña del usuario, debe tener al menos 8 caracteres, una letra mayúscula, una letra minúscula, un número y un carácter especial

    municipalityCreate:
      type: object
      required:
        - email
        - password
        - name
        - province
        - department
      properties:
        email:
          type: string
          example: "john.doe@example.com"
          description: Correo electrónico del usuario, debe cumplir con el formato de un correo electrónico válido

        password:
          type: string
          example: "Abcd1234_"
          description: Contraseña del usuario, debe tener al menos 8 caracteres, una letra mayúscula, una letra minúscula, un número y un carácter especial

        name:
          type: string
          example: "Lima"
          description: Nombre de la municipalidad

        province:
          type: string
          example: "Lima"
          description: Provincia de la municipalidad

        department:
          type: string
          example: "Lima"
          description: Departamento de la municipalidad

        description:
          type: string
          example: "Capital del Perú"
          description: Descripción de la municipalidad

        phrase:
          type: string
          example: "Ciudad de los Reyes"
          description: Frase de la municipalidad

        file:
          type: string
          format: binary
          description: Imagen a subir.

    municipalityUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Lima"
          description: Nombre de la municipalidad

        province:
          type: string
          example: "Lima"
          description: Provincia de la municipalidad

        department:
          type: string
          example: "Lima"
          description: Departamento de la municipalidad

        description:
          type: string
          example: "Capital del Perú"
          description: Descripción de la municipalidad

        phrase:
          type: string
          example: "Ciudad de los Reyes"
          description: Frase de la municipalidad

        file:
          type: string
          format: binary
          description: Imagen a subir.

    beach:
      type: object
      required:
        - name
        - description
        - latitude
        - longitude
        - isHealthy
        - tideStatus
        - hasLifeguards
        - hasRestrooms
        - hasShowers
      properties:
        name:
          type: string
          example: "Playa Redondo"
          description: Nombre de la playa

        description:
          type: string
          example: "Playa de arena blanca"
          description: Descripción de la playa

        latitude:
          type: number
          example: -12.04318
          description: Latitud de la playa

        longitude:
          type: number
          example: -77.02824
          description: Longitud de la playa

        isHealthy:
          type: boolean
          example: true
          description: ¿La playa es saludable?

        tideStatus:
          type: string
          example: "Alta"
          description: Estado de la marea

        hasLifeguards:
          type: boolean
          example: true
          description: ¿La playa cuenta con salvavidas?

        lifeguardSchedule:
          type: string
          example: "08:00 - 18:00"
          description: Horario de los salvavidas

        hasRestrooms:
          type: boolean
          example: true
          description: ¿La playa cuenta con baños?

        restroomSchedule:
          type: string
          example: "08:00 - 18:00"
          description: Horario de los baños

        hasShowers:
          type: boolean
          example: true
          description: ¿La playa cuenta con duchas?

        showerSchedule:
          type: string
          example: "08:00 - 18:00"
          description: Horario de las duchas

        file:
          type: string
          format: binary
          description: Imagen a subir.

        restrictions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Toque de queda"
              description:
                type: string
                example: "Restricción de circulación de personas en la noche"
  schemas:
    municipality:
      type: object
      properties:
        id:
          type: string
          format: cuid
          example: "f2e0f40f20f20f20f20f20f2"
        email:
          type: string
          example: "john.doe@example.com"
          description: Correo electrónico de la municipalidad, debe cumplir con el formato de un correo electrónico válido
        password:
          type: string
          example: "$2b$10$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36FjsdY4Z5k6Q5J5Z5J5J5K"
          description: Contraseña del usuario encriptada
        name:
          type: string
          example: "Lima"
        phrase:
          type: string
          example: "Ciudad de los Reyes"
        description:
          type: string
          example: "Capital del Perú"
        image:
          type: string
          example: "https://res.cloudinary.com/dqfz4zj5e/image/upload/v1630296000/lima.jpg"
        province:
          type: string
          example: "Lima"
        department:
          type: string
          example: "Lima"
        createdAt:
          type: string
          format: date-time
          example: "2021-08-30T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-08-30T00:00:00.000Z"

    restriction:
      type: object
      properties:
        id:
          type: string
          format: cuid
          example: "f2e0f40f20f20f20f20f20f2"
        name:
          type: string
          example: "Toque de queda"
        description:
          type: string
          example: "Restricción de circulación de personas en la noche"
        beachId:
          type: string
          format: cuid
          example: "f2e0f40f20f20f20f20f20f2"
        createdAt:
          type: string
          format: date-time
          example: "2021-08-30T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-08-30T00:00:00.000Z"

    beach:
      type: object
      properties:
        id:
          type: string
          format: cuid
          example: "f2e0f40f20f20f20f20f20f2"
        name:
          type: string
          example: "Playa Redondo"
        description:
          type: string
          example: "Playa de arena blanca"
        image:
          type: string
          example: "https://res.cloudinary.com/dqfz4zj5e/image/upload/v1630296000/redondo.jpg"
        latitude:
          type: number
          example: -12.04318
        longitude:
          type: number
          example: -77.02824
        municipalityId:
          type: string
          format: cuid
          example: "f2e0f40f20f20f20f20f20f2"
        isHealthy:
          type: boolean
          example: true
        tideStatus:
          type: string
          example: "Alta"
        hasLifeguards:
          type: boolean
          example: true
        lifeguardSchedule:
          type: string
          example: "08:00 - 18:00"
        hasRestrooms:
          type: boolean
          example: true
        restroomSchedule:
          type: string
          example: "08:00 - 18:00"
        hasShowers:
          type: boolean
          example: true
        showerSchedule:
          type: string
          example: "08:00 - 18:00"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2021-08-30T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-08-30T00:00:00.000Z"
